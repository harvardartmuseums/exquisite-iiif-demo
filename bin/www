#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('exquisite-iiif-demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket server.
 */

var io = require('socket.io')(server);
io.on('connection', onSocketConnection);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Event listener for socket server events.
 */

function onSocketConnection(socket) {
  console.log('connected');
}

var request = require('request');
var apikey = process.env.APIKEY;
var objectURL = 'http://api.harvardartmuseums.org/object';

setInterval(function(){
  request(objectURL, {qs: {apikey: apikey, sort: 'random', keyword: 'portrait', classification: 'Paintings', fields: 'title,primaryimageurl,images', gallery: 'any', hasimage: 1, size: 1}}, function(error, response, body) {
    var data = JSON.parse(body);
    
    if (!data.error) {
      if (data.records[0].images.length > 0) {
        // Get the image info
        var imageInfoURL = data.records[0].images[0].iiifbaseuri + '/info.json';
        request(imageInfoURL, function(error, response, body) {
          if (response.statusCode === 200) {
            var imageInfo = JSON.parse(body);

            var r = {
              id: data.records[0].id,
              title: data.records[0].title,
              baseimageurl: data.records[0].images[0].baseimageurl,
              iiifbaseuri: data.records[0].images[0].iiifbaseuri,
              imageheight: imageInfo.height,
              imagewidth: imageInfo.width
            }
            io.emit('new_object', r);
          }
        });
      } else {
        io.emit('error', 'bad object');
      } 
    }
  });
}, 5000);  
